Link to Youtube Video :- https://www.youtube.com/watch?v=IjemHvwlGJ0
Link to Leetcode problem :- https://leetcode.com/problems/delete-node-in-a-bst/?envType=study-plan-v2&envId=leetcode-75

Time Complexity :- O(H)
Space Complexity :- O(1)


##############-PYTHON-####################

class Solution:
    def deleteNode(self, root: TreeNode, key: int) -> TreeNode:
        if root is None:
            return None

        if root.val == key:
            return self.helper(root)

        dummy = root
        while root:
            if key < root.val:
                if root.left and root.left.val == key:
                    root.left = self.helper(root.left)
                    break
                else:
                    root = root.left
            else:
                if root.right and root.right.val == key:
                    root.right = self.helper(root.right)
                    break
                else:
                    root = root.right

        return dummy

    def LeftSubTree(self, root: TreeNode) -> TreeNode:
        if root.left is None:
            return root.right
        if root.right is None:
            return root.left

        right_node = self.rightMost(root.left)
        right_node.right = root.right
        return root.left

    def rightMost(self, root: TreeNode) -> TreeNode:
        while root.right:
            root = root.right
        return root

               

 
##############-C++-####################

class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if (root == nullptr)
            return nullptr;

        if (root->val == key)
            return helper(root);

        TreeNode* dummy = root;
        while (root != nullptr) {
            if (key < root->val) {
                if (root->left && root->left->val == key) {
                    root->left = helper(root->left);
                    break;
                } else {
                    root = root->left;
                }
            } else {
                if (root->right && root->right->val == key) {
                    root->right = helper(root->right);
                    break;
                } else {
                    root = root->right;
                }
            }
        }
        return dummy;
    }

private:
    TreeNode* helper(TreeNode* root) {
        if (root->left == nullptr)
            return root->right;
        if (root->right == nullptr)
            return root->left;

        TreeNode* rightmost = rightMost(root->left);
        rightmost->right = root->right;
        return root->left;
    }

    TreeNode* rightMost(TreeNode* root) {
        while (root->right != nullptr) {
            root = root->right;
        }
        return root;
    }
};



##############-Java-####################

class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null) return null;

        if (root.val == key) return helper(root);

        TreeNode dummy = root;
        while (root != null) {
            if (key < root.val) {
                if (root.left != null && root.left.val == key) {
                    root.left = helper(root.left);
                    break;
                } else {
                    root = root.left;
                }
            } else {
                if (root.right != null && root.right.val == key) {
                    root.right = helper(root.right);
                    break;
                } else {
                    root = root.right;
                }
            }
        }
        return dummy;
    }

    private TreeNode helper(TreeNode root) {
        if (root.left == null) return root.right;
        if (root.right == null) return root.left;

        TreeNode rightmost = rightMost(root.left);
        rightmost.right = root.right;
        return root.left;
    }

    private TreeNode rightMost(TreeNode root) {
        while (root.right != null) {
            root = root.right;
        }
        return root;
    }
}
