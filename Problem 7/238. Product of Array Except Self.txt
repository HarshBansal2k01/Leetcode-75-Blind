Link to Youtube Video :- adding soon
Link to Leetcode problem :- https://leetcode.com/problems/product-of-array-except-self/description/?envType=study-plan-v2&envId=leetcode-75


Time Complexity :- O(N)
Space Complexity :- O(N)

##############-PYTHON-####################

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        n= len(nums)

        prefix = [1]*n
        suffix = [1]*n

        for i in range (1,n):
            prefix[i] = prefix[i-1]*nums[i-1]
        
        for i in range (n-2,-1,-1):
            suffix[i] = suffix[i+1]*nums[i+1]
        
        answer = [prefix[i]*suffix[i] for i in range(n)]

        return answer
        

##############-Cpp-####################

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> prefix(n, 1), suffix(n, 1), answer(n);

        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] * nums[i - 1];
        }

        for (int i = n - 2; i >= 0; i--) {
            suffix[i] = suffix[i + 1] * nums[i + 1];
        }

        for (int i = 0; i < n; i++) {
            answer[i] = prefix[i] * suffix[i];
        }

        return answer;
    }
};

##############-Java-####################

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] prefix = new int[n];
        int[] suffix = new int[n];
        int[] answer = new int[n];

        Arrays.fill(prefix, 1);
        Arrays.fill(suffix, 1);

        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] * nums[i - 1];
        }

        for (int i = n - 2; i >= 0; i--) {
            suffix[i] = suffix[i + 1] * nums[i + 1];
        }

        for (int i = 0; i < n; i++) {
            answer[i] = prefix[i] * suffix[i];
        }

        return answer;
    }
}