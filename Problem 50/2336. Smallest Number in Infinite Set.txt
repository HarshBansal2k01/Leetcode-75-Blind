Link to Youtube Video :- https://www.youtube.com/watch?v=1qWzfYUNy9s
Link to Leetcode problem :- https://leetcode.com/problems/smallest-number-in-infinite-set/?envType=study-plan-v2&envId=leetcode-75

Time Complexity :- O(log N)
Space Complexity :- O(n)


##############-PYTHON-####################

class SmallestInfiniteSet:
    def __init__(self):
        self.current = 1
        self.added_back = set()
        self.min_heap = []

    def popSmallest(self) -> int:
        if self.min_heap:
            smallest = heapq.heappop(self.min_heap)     
            self.added_back.remove(smallest)             
            return smallest
        else:
            val = self.current                           
            self.current += 1
            return val

    def addBack(self, num: int) -> None:
        if num < self.current and num not in self.added_back:  
            heapq.heappush(self.min_heap, num)                 
            self.added_back.add(num)                           

 
##############-C++-####################

class SmallestInfiniteSet {
private:
    int current;
    set<int> addedBack;
    priority_queue<int, vector<int>, greater<int>> minHeap;

public:
    SmallestInfiniteSet() {
        current = 1;
    }

    int popSmallest() {
        if (!minHeap.empty()) {
            int smallest = minHeap.top();
            minHeap.pop();
            addedBack.erase(smallest);
            return smallest;
        } else {
            return current++;
        }
    }

    void addBack(int num) {
        if (num < current && addedBack.find(num) == addedBack.end()) {
            minHeap.push(num);
            addedBack.insert(num);
        }
    }
};


##############-Java-####################

import java.util.*;

class SmallestInfiniteSet {
    private int current;
    private Set<Integer> addedBack;
    private PriorityQueue<Integer> minHeap;

    public SmallestInfiniteSet() {
        current = 1;
        addedBack = new HashSet<>();
        minHeap = new PriorityQueue<>();
    }

    public int popSmallest() {
        if (!minHeap.isEmpty()) {
            int smallest = minHeap.poll();
            addedBack.remove(smallest);
            return smallest;
        } else {
            return current++;
        }
    }

    public void addBack(int num) {
        if (num < current && !addedBack.contains(num)) {
            minHeap.offer(num);
            addedBack.add(num);
        }
    }
}
