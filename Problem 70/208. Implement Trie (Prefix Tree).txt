Link to Youtube Video :- https://www.youtube.com/watch?v=grj7v9QJ-Kk
Link to Leetcode problem :- https://leetcode.com/problems/implement-trie-prefix-tree/?envType=study-plan-v2&envId=leetcode-75

Time Complexity :- O(L+P) -> L = word length , P =  prefix length
Space Complexity :- O(L*P) -> L = word length , P =  prefix length


##############-PYTHON-####################

class TrieNode:
    def __init__(self):
        self.children = [None] * 26  
        self.is_word_end = False      

    def contains_key(self, char):
        return self.children[ord(char) - ord('a')] is not None

    def put(self, char, node):
        self.children[ord(char) - ord('a')] = node

    def get(self, char):
        return self.children[ord(char) - ord('a')]

    def set_end(self):
        self.is_word_end = True

    def is_end(self):
        return self.is_word_end


class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word: str) -> None:
        current_node = self.root
        for char in word:
            if not current_node.contains_key(char):
                current_node.put(char, TrieNode())
            current_node = current_node.get(char)
        current_node.set_end()

    def search(self, word: str) -> bool:
        current_node = self.root
        for char in word:
            if not current_node.contains_key(char):
                return False
            current_node = current_node.get(char)
        return current_node.is_end()

    def startsWith(self, prefix: str) -> bool:
        current_node = self.root
        for char in prefix:
            if not current_node.contains_key(char):
                return False
            current_node = current_node.get(char)
        return True

        
 
##############-C++-####################

class TrieNode {
public:
    TrieNode* children[26];
    bool isWordEnd;

    TrieNode() {
        memset(children, 0, sizeof(children));
        isWordEnd = false;
    }

    bool containsKey(char ch) {
        return children[ch - 'a'] != nullptr;
    }

    TrieNode* get(char ch) {
        return children[ch - 'a'];
    }

    void put(char ch, TrieNode* node) {
        children[ch - 'a'] = node;
    }

    void setEnd() {
        isWordEnd = true;
    }

    bool isEnd() {
        return isWordEnd;
    }
};

class Trie {
private:
    TrieNode* root;
    
public:
    Trie() {
        root = new TrieNode();
    }

    void insert(string word) {
        TrieNode* current = root;
        for (char ch : word) {
            if (!current->containsKey(ch)) {
                current->put(ch, new TrieNode());
            }
            current = current->get(ch);
        }
        current->setEnd();
    }

    bool search(string word) {
        TrieNode* current = root;
        for (char ch : word) {
            if (!current->containsKey(ch)) {
                return false;
            }
            current = current->get(ch);
        }
        return current->isEnd();
    }

    bool startsWith(string prefix) {
        TrieNode* current = root;
        for (char ch : prefix) {
            if (!current->containsKey(ch)) {
                return false;
            }
            current = current->get(ch);
        }
        return true;
    }
};



##############-Java -####################

class TrieNode {
    TrieNode[] children = new TrieNode[26];
    boolean isWordEnd = false;
    
    public boolean containsKey(char ch) {
        return children[ch - 'a'] != null;
    }
    
    public TrieNode get(char ch) {
        return children[ch - 'a'];
    }
    
    public void put(char ch, TrieNode node) {
        children[ch - 'a'] = node;
    }
    
    public void setEnd() {
        isWordEnd = true;
    }
    
    public boolean isEnd() {
        return isWordEnd;
    }
}

class Trie {
    private TrieNode root;

    public Trie() {
        root = new TrieNode();
    }
    
    public void insert(String word) {
        TrieNode current = root;
        for (char ch : word.toCharArray()) {
            if (!current.containsKey(ch)) {
                current.put(ch, new TrieNode());
            }
            current = current.get(ch);
        }
        current.setEnd();
    }
    
    public boolean search(String word) {
        TrieNode current = root;
        for (char ch : word.toCharArray()) {
            if (!current.containsKey(ch)) {
                return false;
            }
            current = current.get(ch);
        }
        return current.isEnd();
    }
    
    public boolean startsWith(String prefix) {
        TrieNode current = root;
        for (char ch : prefix.toCharArray()) {
            if (!current.containsKey(ch)) {
                return false;
            }
            current = current.get(ch);
        }
        return true;
    }
}
