Link to Youtube Video :- https://www.youtube.com/watch?v=L6-ArWvvPIg
Link to Leetcode problem :- https://leetcode.com/problems/search-suggestions-system/description/?envType=study-plan-v2&envId=leetcode-75

Time Complexity :- O(N*M+L)
Space Complexity :- O(N*M) 
// N -> Number of words in products
// M = Average length of each word
// L = Length of searchWord

##############-PYTHON-####################

class Node:
    def __init__(self):
        self.children = [None] * 26
        self.is_word_end = False
        self.suggestions = [] 

    def contains_key(self, ch):
        return self.children[ord(ch) - ord('a')] is not None

    def add(self, ch, node):
        self.children[ord(ch) - ord('a')] = node

    def get(self, ch):
        return self.children[ord(ch) - ord('a')]

    def set_end(self):
        self.is_word_end = True


class Trie:
    def __init__(self):
        self.root = Node()

    def insert(self, word: str) -> None:
        current_node = self.root
        for ch in word:
            if not current_node.contains_key(ch):
                current_node.add(ch, Node())
            current_node = current_node.get(ch)

            if len(current_node.suggestions) < 3:
                current_node.suggestions.append(word)
                current_node.suggestions.sort()
            else:
                if word < current_node.suggestions[-1]:
                    current_node.suggestions[-1] = word
                    current_node.suggestions.sort()

        current_node.set_end()

    def getSuggestions(self, prefix: str) -> List[str]:
        current_node = self.root
        for ch in prefix:
            if not current_node.contains_key(ch):
                return []
            current_node = current_node.get(ch)
        return current_node.suggestions


class Solution:
    def suggestedProducts(self, products: List[str], searchWord: str) -> List[List[str]]:
        trie = Trie()

        for word in sorted(products):
            trie.insert(word)

        res = []
        prefix = ""
        for ch in searchWord:
            prefix += ch
            res.append(trie.getSuggestions(prefix))
        return res
        
 
##############-C++-####################

class Node {
public:
    Node* children[26];
    bool isWordEnd;
    vector<string> suggestions;

    Node() {
        fill(begin(children), end(children), nullptr);
        isWordEnd = false;
    }

    bool containsKey(char ch) {
        return children[ch - 'a'] != nullptr;
    }

    void add(char ch, Node* node) {
        children[ch - 'a'] = node;
    }

    Node* get(char ch) {
        return children[ch - 'a'];
    }

    void setEnd() {
        isWordEnd = true;
    }
};

class Trie {
    Node* root;

public:
    Trie() {
        root = new Node();
    }

    void insert(string word) {
        Node* current = root;
        for (char ch : word) {
            if (!current->containsKey(ch)) {
                current->add(ch, new Node());
            }
            current = current->get(ch);

            if (current->suggestions.size() < 3) {
                current->suggestions.push_back(word);
                sort(current->suggestions.begin(), current->suggestions.end());
            } else {
                if (word < current->suggestions[2]) {
                    current->suggestions[2] = word;
                    sort(current->suggestions.begin(), current->suggestions.end());
                }
            }
        }
        current->setEnd();
    }

    vector<string> getSuggestions(string prefix) {
        Node* current = root;
        for (char ch : prefix) {
            if (!current->containsKey(ch)) {
                return {};
            }
            current = current->get(ch);
        }
        return current->suggestions;
    }
};

class Solution {
public:
    vector<vector<string>> suggestedProducts(vector<string>& products, string searchWord) {
        sort(products.begin(), products.end());
        Trie trie;
        
        for (string& word : products) {
            trie.insert(word);
        }
        
        vector<vector<string>> res;
        string prefix = "";
        for (char ch : searchWord) {
            prefix += ch;
            res.push_back(trie.getSuggestions(prefix));
        }
        return res;
    }
};




##############-Java-####################


class Node {
    Node[] children = new Node[26];
    boolean isWordEnd = false;
    List<String> suggestions = new ArrayList<>();

    boolean containsKey(char ch) {
        return children[ch - 'a'] != null;
    }

    void add(char ch, Node node) {
        children[ch - 'a'] = node;
    }

    Node get(char ch) {
        return children[ch - 'a'];
    }

    void setEnd() {
        isWordEnd = true;
    }
}

class Trie {
    private Node root;

    public Trie() {
        root = new Node();
    }

    public void insert(String word) {
        Node current = root;
        for (char ch : word.toCharArray()) {
            if (!current.containsKey(ch)) {
                current.add(ch, new Node());
            }
            current = current.get(ch);

            if (current.suggestions.size() < 3) {
                current.suggestions.add(word);
                Collections.sort(current.suggestions);
            } else {
                if (word.compareTo(current.suggestions.get(2)) < 0) {
                    current.suggestions.set(2, word);
                    Collections.sort(current.suggestions);
                }
            }
        }
        current.setEnd();
    }

    public List<String> getSuggestions(String prefix) {
        Node current = root;
        for (char ch : prefix.toCharArray()) {
            if (!current.containsKey(ch)) {
                return new ArrayList<>();
            }
            current = current.get(ch);
        }
        return current.suggestions;
    }
}

class Solution {
    public List<List<String>> suggestedProducts(String[] products, String searchWord) {
        Arrays.sort(products);
        Trie trie = new Trie();

        for (String word : products) {
            trie.insert(word);
        }

        List<List<String>> res = new ArrayList<>();
        StringBuilder prefix = new StringBuilder();

        for (char ch : searchWord.toCharArray()) {
            prefix.append(ch);
            res.add(trie.getSuggestions(prefix.toString()));
        }
        return res;
    }
}
