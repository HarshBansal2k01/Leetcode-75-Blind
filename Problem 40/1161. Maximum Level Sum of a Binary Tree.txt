Link to Youtube Video :- 
Link to Leetcode problem :- https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree/description/?envType=study-plan-v2&envId=leetcode-75

Time Complexity :- O(N)
Space Complexity :- O(W)


##############-PYTHON-####################

class Solution:
    def maxLevelSum(self, root: Optional[TreeNode]) -> int:
        if root is None:
            return 0
        summ=float('-inf')
        q = deque()
        level=1
        q.append(root)
        ans=0
        while q:
            sz = len(q)
            curr=0
            for _ in range(sz):
                node = q.popleft()
                curr += node.val

                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
            if curr > summ:
                ans = level
                summ = curr
            level+=1

        return ans
               

 
##############-C++-####################

class Solution {
public:
    int maxLevelSum(TreeNode* root) {
        if (!root) return 0;

        queue<TreeNode*> q;
        q.push(root);
        int level = 1, maxLevel = 1;
        int maxSum = INT_MIN;

        while (!q.empty()) {
            int size = q.size();
            int currSum = 0;

            for (int i = 0; i < size; ++i) {
                TreeNode* node = q.front();
                q.pop();
                currSum += node->val;

                if (node->left) q.push(node->left);
                if (node->right) q.push(node->right);
            }

            if (currSum > maxSum) {
                maxSum = currSum;
                maxLevel = level;
            }
            ++level;
        }

        return maxLevel;
    }
};






##############-Java-####################

class Solution {
    public int maxLevelSum(TreeNode root) {
        if (root == null) return 0;

        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        int level = 1, maxLevel = 1;
        int maxSum = Integer.MIN_VALUE;

        while (!q.isEmpty()) {
            int size = q.size();
            int currSum = 0;

            for (int i = 0; i < size; i++) {
                TreeNode node = q.poll();
                currSum += node.val;

                if (node.left != null) q.add(node.left);
                if (node.right != null) q.add(node.right);
            }

            if (currSum > maxSum) {
                maxSum = currSum;
                maxLevel = level;
            }
            level++;
        }

        return maxLevel;
    }
}
 