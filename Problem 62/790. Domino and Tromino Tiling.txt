Link to Youtube Video :- 
Link to Leetcode problem :- https://leetcode.com/problems/domino-and-tromino-tiling/description/?envType=study-plan-v2&envId=leetcode-75

Time Complexity :- O(N)
Space Complexity :- O(N)


##############-PYTHON-####################

class Solution:
    def __init__(self):
        self.M = 10**9 + 7
        self.t = [-1] * 1001

    def solve(self, n):
        if n == 1 or n == 2:
            return n
        if n == 3:
            return 5
        
        if self.t[n] != -1:
            return self.t[n]
        
        self.t[n] = (2 * self.solve(n - 1) % self.M + self.solve(n - 3) % self.M) % self.M
        return self.t[n]

    def numTilings(self, n: int) -> int:
        return self.solve(n)




 
##############-C++-####################

class Solution {
public:
    const int M = 1e9 + 7;
    vector<int> t;

    Solution() {
        t.assign(1001, -1);
    }

    int solve(int n) {
        if (n == 1 || n == 2) return n;
        if (n == 3) return 5;

        if (t[n] != -1) return t[n];

        t[n] = (2LL * solve(n - 1) % M + solve(n - 3) % M) % M;
        return t[n];
    }

    int numTilings(int n) {
        return solve(n);
    }
};




##############-Java-####################

class Solution {
    private final int M = 1_000_000_007;
    private int[] t;

    public Solution() {
        t = new int[1001];
        Arrays.fill(t, -1);
    }

    private int solve(int n) {
        if (n == 1 || n == 2) return n;
        if (n == 3) return 5;

        if (t[n] != -1) return t[n];

        t[n] = (int)((2L * solve(n - 1) % M + solve(n - 3) % M) % M);
        return t[n];
    }

    public int numTilings(int n) {
        return solve(n);
    }
}

