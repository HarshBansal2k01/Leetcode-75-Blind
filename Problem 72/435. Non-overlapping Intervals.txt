Link to Youtube Video :- https://www.youtube.com/watch?v=_OqedKBwhjY
Link to Leetcode problem :- https://leetcode.com/problems/non-overlapping-intervals/?envType=study-plan-v2&envId=leetcode-75

Time Complexity :- O(N*log*N)
Space Complexity :- O(1)


##############-PYTHON-####################

class Solution:
    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:
        intervals.sort()
        count = 0

        prev_end = intervals[0][1]

        for i in range(1,len(intervals)):
            curr_start = intervals[i][0]
            curr_end = intervals[i][1]
            if curr_start<prev_end:
                count+=1

                prev_end = min(curr_end,prev_end)
            else:
                prev_end = curr_end
        
        return count

        
 
##############-C++-####################

class Solution {
public:
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        sort(intervals.begin(), intervals.end());  // Sort by start time
        int count = 0;
        int prevEnd = intervals[0][1];

        for (int i = 1; i < intervals.size(); i++) {
            int currStart = intervals[i][0];
            int currEnd = intervals[i][1];

            if (currStart < prevEnd) {  // Overlap detected
                count++;
                prevEnd = min(prevEnd, currEnd);  // Keep the smaller end
            } else {
                prevEnd = currEnd;
            }
        }
        return count;
    }
};



##############-Java-####################


class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);  // Sort by start time
        int count = 0;
        int prevEnd = intervals[0][1];

        for (int i = 1; i < intervals.length; i++) {
            int currStart = intervals[i][0];
            int currEnd = intervals[i][1];

            if (currStart < prevEnd) {  // Overlap detected
                count++;
                prevEnd = Math.min(prevEnd, currEnd); // Keep interval with smaller end
            } else {
                prevEnd = currEnd; // Move to next non-overlapping interval
            }
        }
        return count;
    }
}



