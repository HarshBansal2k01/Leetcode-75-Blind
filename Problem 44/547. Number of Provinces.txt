Link to Youtube Video :- https://www.youtube.com/watch?v=6OHa_QOt_Gw
Link to Leetcode problem :- https://leetcode.com/problems/number-of-provinces/description/?envType=study-plan-v2&envId=leetcode-75

Time Complexity :- O(N+E)
Space Complexity :- O(N+E)


##############-PYTHON-####################

class Solution:
    def dfs(self,node,vis,g):
        vis[node]=1
        for j in range(len(g)):
            if g[node][j]==1 and not vis[j]:
                self.dfs(j,vis,g)


    def findCircleNum(self, g: List[List[int]]) -> int:
        n = len(g)
        if n == 0:return 0
        vis = [0]*n
        cnt=0
        for i in range(n):
            if not vis[i]:
                cnt+=1
                self.dfs(i,vis,g)
        
        return cnt
               

 
##############-C++-####################

class Solution {
public:
    void dfs(int node, vector<int>& vis, vector<vector<int>>& isConnected) {
        vis[node] = 1;
        for (int j = 0; j < isConnected.size(); ++j) {
            if (isConnected[node][j] == 1 && !vis[j]) {
                dfs(j, vis, isConnected);
            }
        }
    }

    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<int> vis(n, 0);
        int cnt = 0;

        for (int i = 0; i < n; ++i) {
            if (!vis[i]) {
                cnt++;
                dfs(i, vis, isConnected);
            }
        }

        return cnt;
    }
};




##############-Java-####################

class Solution {
    public void dfs(int node, int[] vis, int[][] isConnected) {
        vis[node] = 1;
        for (int j = 0; j < isConnected.length; j++) {
            if (isConnected[node][j] == 1 && vis[j] == 0) {
                dfs(j, vis, isConnected);
            }
        }
    }

    public int findCircleNum(int[][] isConnected) {
        int n = isConnected.length;
        int[] vis = new int[n];
        int cnt = 0;

        for (int i = 0; i < n; i++) {
            if (vis[i] == 0) {
                cnt++;
                dfs(i, vis, isConnected);
            }
        }

        return cnt;
    }
}

