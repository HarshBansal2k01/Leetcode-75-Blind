Link to Youtube Video :- 
Link to Leetcode problem :- https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/description/?envType=study-plan-v2&envId=leetcode-75

Time Complexity :- O(2*N)
Space Complexity :- O(2*N)


##############-PYTHON Memoization-####################

class Solution:
    def func(self, ind, buy, prices, fee, dp):
        if ind == len(prices):
            return 0
        
        if dp[ind][buy] != -1:
            return dp[ind][buy]
        
        if buy:
            profit = max(-prices[ind] + self.func(ind + 1, 0, prices, fee, dp), 
                         0 + self.func(ind + 1, 1, prices, fee, dp))
        else:
            profit = max(prices[ind] - fee + self.func(ind + 1, 1, prices, fee, dp), 
                         0 + self.func(ind + 1, 0, prices, fee, dp))
        
        dp[ind][buy] = profit
        return profit
    
    def maxProfit(self, prices, fee):
        n = len(prices)
        dp = [[-1 for _ in range(2)] for _ in range(n)]
        return self.func(0, 1, prices, fee, dp)

##############-PYTHON Tabular-####################

class Solution:
    def maxProfit(self, prices, fee):
        n = len(prices)
        dp = [[0 for _ in range(2)] for _ in range(n + 1)]
        
        dp[n][0] = dp[n][1] = 0
        
        for ind in range(n - 1, -1, -1):
            for buy in range(2):
                if buy:
                    profit = max(-prices[ind] - fee + dp[ind + 1][0], dp[ind + 1][1])
                else:
                    profit = max(prices[ind] + dp[ind + 1][1], dp[ind + 1][0])
                
                dp[ind][buy] = profit
        
        return dp[0][1]
 
##############-C++ Memoization-####################

class Solution {
public:
    int func(int ind, int buy, vector<int>& prices, int fee, vector<vector<int>>& dp) {
        if (ind == prices.size()) return 0;
        
        if (dp[ind][buy] != -1) return dp[ind][buy];

        int profit = 0;
        if (buy) {
            profit = max(-prices[ind] + func(ind + 1, 0, prices, fee, dp),
                         0 + func(ind + 1, 1, prices, fee, dp));
        } else {
            profit = max(prices[ind] - fee + func(ind + 1, 1, prices, fee, dp),
                         0 + func(ind + 1, 0, prices, fee, dp));
        }

        return dp[ind][buy] = profit;
    }

    int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
        vector<vector<int>> dp(n, vector<int>(2, -1));
        return func(0, 1, prices, fee, dp);
    }
};


##############-C++ Tabular-####################

class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
        vector<vector<int>> dp(n + 1, vector<int>(2, 0));

        for (int ind = n - 1; ind >= 0; ind--) {
            for (int buy = 0; buy <= 1; buy++) {
                if (buy == 1) {
                    dp[ind][buy] = max(-prices[ind] - fee + dp[ind + 1][0], dp[ind + 1][1]);
                } else {
                    dp[ind][buy] = max(prices[ind] + dp[ind + 1][1], dp[ind + 1][0]);
                }
            }
        }

        return dp[0][1];
    }
};





##############-Java Memoization-####################

class Solution {
    public int func(int ind, int buy, int[] prices, int fee, int[][] dp) {
        if (ind == prices.length) return 0;

        if (dp[ind][buy] != -1) return dp[ind][buy];

        int profit = 0;
        if (buy == 1) {
            profit = Math.max(-prices[ind] + func(ind + 1, 0, prices, fee, dp),
                              0 + func(ind + 1, 1, prices, fee, dp));
        } else {
            profit = Math.max(prices[ind] - fee + func(ind + 1, 1, prices, fee, dp),
                              0 + func(ind + 1, 0, prices, fee, dp));
        }

        return dp[ind][buy] = profit;
    }

    public int maxProfit(int[] prices, int fee) {
        int n = prices.length;
        int[][] dp = new int[n][2];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        return func(0, 1, prices, fee, dp);
    }
}



##############-Java Tabular-####################

class Solution {
    public int maxProfit(int[] prices, int fee) {
        int n = prices.length;
        int[][] dp = new int[n + 1][2];

        for (int ind = n - 1; ind >= 0; ind--) {
            for (int buy = 0; buy <= 1; buy++) {
                if (buy == 1) {
                    dp[ind][buy] = Math.max(-prices[ind] - fee + dp[ind + 1][0], dp[ind + 1][1]);
                } else {
                    dp[ind][buy] = Math.max(prices[ind] + dp[ind + 1][1], dp[ind + 1][0]);
                }
            }
        }

        return dp[0][1];
    }
}
