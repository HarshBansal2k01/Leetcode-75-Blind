Link to Youtube Video :- https://www.youtube.com/watch?v=4HLJY1yBq3M
Link to Leetcode problem :- https://leetcode.com/problems/unique-paths/description/?envType=study-plan-v2&envId=leetcode-75

Time Complexity :- O(M*N)
Space Complexity :- O(M*N)


##############-PYTHON-####################

class Solution:
    def solve(self, i, j, dp):
        if i < 0 or j < 0:
            return 0
        if i == 0 or j == 0:
            return 1
        if dp[i][j] != -1:
            return dp[i][j]
        
        up = self.solve(i - 1, j, dp)
        left = self.solve(i, j - 1, dp)
        dp[i][j] = up + left
        return dp[i][j]

    def uniquePaths(self, m: int, n: int) -> int:
        dp = [[-1 for _ in range(n)] for _ in range(m)]
        return self.solve(m - 1, n - 1, dp)



 
##############-C++-####################

class Solution {
public:
    int solve(int i, int j, vector<vector<int>>& dp) {
        if (i < 0 || j < 0) return 0;
        if (i == 0 || j == 0) return 1;
        if (dp[i][j] != -1) return dp[i][j];

        int up = solve(i - 1, j, dp);
        int left = solve(i, j - 1, dp);
        dp[i][j] = up + left;
        return dp[i][j];
    }

    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n, -1));
        return solve(m - 1, n - 1, dp);
    }
};



##############-Java-####################

class Solution {
    public int solve(int i, int j, int[][] dp) {
        if (i < 0 || j < 0) return 0;
        if (i == 0 || j == 0) return 1;
        if (dp[i][j] != -1) return dp[i][j];

        int up = solve(i - 1, j, dp);
        int left = solve(i, j - 1, dp);
        dp[i][j] = up + left;
        return dp[i][j];
    }

    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        for (int[] row : dp)
            Arrays.fill(row, -1);

        return solve(m - 1, n - 1, dp);
    }
}

