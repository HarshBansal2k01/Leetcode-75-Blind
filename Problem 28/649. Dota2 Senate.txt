Link to Youtube Video :- 
Link to Leetcode problem :- https://leetcode.com/problems/dota2-senate/?envType=study-plan-v2&envId=leetcode-75

Time Complexity :- O(N)
Space Complexity :- O(N)

##############-PYTHON-####################

class Solution:
    def predictPartyVictory(self, senate: str) -> str:
        senate = list(senate)

        Radiant = []
        Dire=[]

        for i, c in enumerate(senate):
            if c == "R":
                Radiant.append(i)
            else:
                Dire.append(i)
        
        while Dire and Radiant:
            D = Dire.pop(0)
            R = Radiant.pop(0)

            if R < D:
                Radiant.append(D + len(senate))
            else:
                Dire.append(R + len(senate))
        
        return "Radiant" if Radiant else "Dire"


 
##############-C++-####################

class Solution {
public:
    string predictPartyVictory(string senate) {
        queue<int> radiant, dire;
        int n = senate.size();

        for (int i = 0; i < n; ++i) {
            if (senate[i] == 'R') {
                radiant.push(i);
            } else {
                dire.push(i);
            }
        }

        while (!radiant.empty() && !dire.empty()) {
            int r = radiant.front(); radiant.pop();
            int d = dire.front(); dire.pop();

            if (r < d) {
                radiant.push(r + n);
            } else {
                dire.push(d + n);
            }
        }

        return radiant.empty() ? "Dire" : "Radiant";
    }
};


##############-Java-####################

class Solution {
    public String predictPartyVictory(String senate) {
        Queue<Integer> radiant = new LinkedList<>();
        Queue<Integer> dire = new LinkedList<>();
        int n = senate.length();

        for (int i = 0; i < n; i++) {
            if (senate.charAt(i) == 'R') {
                radiant.offer(i);
            } else {
                dire.offer(i);
            }
        }

        while (!radiant.isEmpty() && !dire.isEmpty()) {
            int r = radiant.poll();
            int d = dire.poll();

            if (r < d) {
                radiant.offer(r + n);
            } else {
                dire.offer(d + n);
            }
        }

        return radiant.isEmpty() ? "Dire" : "Radiant";
    }
}