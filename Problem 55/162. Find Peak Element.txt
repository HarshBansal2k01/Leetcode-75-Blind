Link to Youtube Video :- https://www.youtube.com/watch?v=4OdfyZ_wqtc
Link to Leetcode problem :- https://leetcode.com/problems/find-peak-element/description/?envType=study-plan-v2&envId=leetcode-75

Time Complexity :- O(log*N)
Space Complexity :- O(1)


##############-PYTHON-####################

class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        n = len(nums)

        if n==1:
            return 0
        if nums[0] > nums[1]:
            return 0
        
        if nums[n-1]>nums[n-2]:
            return n-1
        
        l=1
        r=n-2

        while l<=r:
            mid = l+(r-l)//2
            if nums[mid]>nums[mid-1] and nums[mid] > nums[mid+1]:
                return mid
            elif nums[mid]> nums[mid-1] and nums[mid] < nums[mid+1]:
                l = mid+1
            else:
                r = mid-1
        
        return 0
 
##############-C++-####################

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int n = nums.size();

        if (n == 1) return 0;
        if (nums[0] > nums[1]) return 0;
        if (nums[n - 1] > nums[n - 2]) return n - 1;

        int l = 1, r = n - 2;

        while (l <= r) {
            int mid = l + (r - l) / 2;

            if (nums[mid] > nums[mid - 1] && nums[mid] > nums[mid + 1]) {
                return mid;
            } else if (nums[mid] > nums[mid - 1] && nums[mid] < nums[mid + 1]) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }

        return 0;
    }
};


##############-Java-####################

class Solution {
    public int findPeakElement(int[] nums) {
        int n = nums.length;

        if (n == 1) return 0;
        if (nums[0] > nums[1]) return 0;
        if (nums[n - 1] > nums[n - 2]) return n - 1;

        int l = 1, r = n - 2;

        while (l <= r) {
            int mid = l + (r - l) / 2;

            if (nums[mid] > nums[mid - 1] && nums[mid] > nums[mid + 1]) {
                return mid;
            } else if (nums[mid] > nums[mid - 1] && nums[mid] < nums[mid + 1]) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }

        return 0;
    }
}
