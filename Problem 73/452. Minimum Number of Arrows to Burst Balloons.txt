Link to Youtube Video :- https://www.youtube.com/watch?v=ZHKlDAeJS5Y
Link to Leetcode problem :- https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/?envType=study-plan-v2&envId=leetcode-75

Time Complexity :- O(N*log*N)
Space Complexity :- O(1)


##############-PYTHON-####################

class Solution:
    def findMinArrowShots(self, points: List[List[int]]) -> int:
        n = len(points)
        if n==0:
            return 0
        

        points.sort()
        prev = points[0]
        arrows = 1

        for i in range(1,n):
            curr_start = points[i][0]
            curr_end = points[i][1]
            prev_start = prev[0]
            prev_end = prev[1]

            if curr_start > prev_end:
                arrows+=1
                prev = points[i]
            else:
                prev[0] = max(curr_start,prev_start)
                prev[1] = min(curr_end,prev_end)
        
        return arrows

 
##############-C++-####################

class Solution {
public:
    int findMinArrowShots(vector<vector<int>>& points) {
        int n = points.size();
        if (n == 0) return 0;

        sort(points.begin(), points.end());
        vector<int> prev = points[0];
        int arrows = 1;

        for (int i = 1; i < n; i++) {
            int curr_start = points[i][0];
            int curr_end = points[i][1];
            int prev_start = prev[0];
            int prev_end = prev[1];

            if (curr_start > prev_end) {
                arrows++;
                prev = points[i];
            } else {
                prev[0] = max(curr_start, prev_start);
                prev[1] = min(curr_end, prev_end);
            }
        }

        return arrows;
    }
};



##############-Java-####################

class Solution {
    public int findMinArrowShots(int[][] points) {
        int n = points.length;
        if (n == 0) return 0;

        Arrays.sort(points, (a, b) -> {
            if (a[0] == b[0]) return Integer.compare(a[1], b[1]);
            return Integer.compare(a[0], b[0]);
        });

        int[] prev = points[0];
        int arrows = 1;

        for (int i = 1; i < n; i++) {
            int currStart = points[i][0];
            int currEnd = points[i][1];
            int prevStart = prev[0];
            int prevEnd = prev[1];

            if (currStart > prevEnd) {
                arrows++;
                prev = points[i];
            } else {
                prev[0] = Math.max(currStart, prevStart);
                prev[1] = Math.min(currEnd, prevEnd);
            }
        }

        return arrows;
    }
}
