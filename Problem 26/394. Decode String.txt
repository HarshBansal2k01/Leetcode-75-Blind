Link to Youtube Video :- 
Link to Leetcode problem :- https://leetcode.com/problems/decode-string/description/?envType=study-plan-v2&envId=leetcode-75

Time Complexity :- O(N)
Space Complexity :- O(N)

##############-PYTHON-####################

class Solution:
    def decodeString(self, s: str) -> str:
        num_stack=[]
        str_stack=[]
        curr_num=0
        curr_str=''
        n = len(s)

        for i in range(n):
            if s[i].isdigit():
                curr_num = curr_num * 10 + int(s[i])
            elif s[i] == '[':
                num_stack.append(curr_num)
                str_stack.append(curr_str)
                curr_str=''
                curr_num=0
            elif s[i] == ']':
                nums = num_stack[-1]
                num_stack.pop()
                prev_str = str_stack.pop()
                curr_str = prev_str + curr_str*nums
            else:
                curr_str += s[i]
        
        return curr_str
 
##############-C++-####################

class Solution {
public:
    string decodeString(string s) {
        stack<int> numStack;
        stack<string> strStack;
        int currNum = 0;
        string currStr = "";

        for (char ch : s) {
            if (isdigit(ch)) {
                currNum = currNum * 10 + (ch - '0');
            } else if (ch == '[') {
                numStack.push(currNum);
                strStack.push(currStr);
                currNum = 0;
                currStr = "";
            } else if (ch == ']') {
                int nums = numStack.top(); numStack.pop();
                string prevStr = strStack.top(); strStack.pop();
                string temp = "";
                for (int i = 0; i < nums; ++i) {
                    temp += currStr;
                }
                currStr = prevStr + temp;
            } else {
                currStr += ch;
            }
        }

        return currStr;
    }
};



##############-Java-####################
class Solution {
    public String decodeString(String s) {
        Stack<Integer> numStack = new Stack<>();
        Stack<String> strStack = new Stack<>();
        int currNum = 0;
        String currStr = "";

        for (char ch : s.toCharArray()) {
            if (Character.isDigit(ch)) {
                currNum = currNum * 10 + (ch - '0');
            } else if (ch == '[') {
                numStack.push(currNum);
                strStack.push(currStr);
                currNum = 0;
                currStr = "";
            } else if (ch == ']') {
                int nums = numStack.pop();
                String prevStr = strStack.pop();
                StringBuilder temp = new StringBuilder();
                for (int i = 0; i < nums; i++) {
                    temp.append(currStr);
                }
                currStr = prevStr + temp.toString();
            } else {
                currStr += ch;
            }
        }

        return currStr;
    }
}
